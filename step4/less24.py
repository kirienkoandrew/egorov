class Vector:
    """Давайте создадим класс Vector, экземпляры которого будут представлять собой контейнеры для хранения только целых чисел.

Ваша задача — создать класс Vector, который хранит в себе коллекцию целых чисел.  У класса Vector должны быть реализованы:

метод __init__, принимающий произвольное количество аргументов. Среди всех переданных аргументов необходимо оставить только целые числа и сохранить их в экземпляр в виде списка;

переопределить метод __str__ так, чтобы экземпляр класса Vector отображался следующим образом:
«Вектор(<value1>, <value2>, <value3>, ...)», если вектор не пустой. При этом значения должны быть упорядочены по возрастанию (будьте аккуратнее с пробелами, они стоят только после запятых, см. пример ниже);

«Пустой вектор», если наш вектор не хранит в себе значения

переопределить метод __add__ так, чтобы экземпляр класса Vector мог складываться
с целым числом, в результате должен получиться новый Vector, у которого каждый элемент атрибута values увеличен на число
с другим вектором такой же длины. В результате должен получиться новый Vector, состоящий из суммы элементов, расположенных на одинаковых местах. Если длины векторов различаются, выведите сообщение "Сложение векторов разной длины недопустимо";
В случае, если вектор складывается с другим типом(не числом и не вектором), нужно вывести сообщение "Вектор нельзя сложить с <значением>"
переопределить метод __mul__ так, чтобы экземпляр класса Vector мог умножаться
на целое число. В результате должен получиться новый Vector, у которого каждый элемент атрибута values умножен на переданное число;
на другой вектор такой же длины. В результате должен получиться новый Vector, состоящий из произведения элементов, расположенных на одинаковых местах. Если длины векторов различаются, выведите сообщение "Умножение векторов разной длины недопустимо";
В случае, если вектор умножается с другим типом(не числом и не вектором), нужно вывести сообщение "Вектор нельзя умножать с <значением>";
"""
    def __init__(self, *args):
        self.values = args

    @property
    def values(self):
        return self.__lst

    @values.setter
    def values(self, args):
        self.__lst = list(sorted([i for i in args if isinstance(i, int) and not isinstance(i, bool)]))

    def __str__(self) -> str:
        if self.values:
            res = ', '.join(str(i) for i in self.values)
            return f'Вектор({res})'
        else:
            return "Пустой вектор"

    def __len__(self):
        return len(self.values)

    def __add__(self, other):
        if isinstance(other, Vector):
            if len(self) == len(other):
                res = list(x + y for x, y in zip(self.values, other.values))
                return Vector(*res)
            else:
                print('Сложение векторов разной длины недопустимо')
        elif isinstance(other, int):
            res = list(i + other for i in self.values)
            return Vector(*res)
        else:
            print(f'Вектор нельзя сложить с {other}')

    def __mul__(self, other):
        if isinstance(other, Vector):
            if len(self) == len(other):
                res = list(x * y for x, y in zip(self.values, other.values))
                return Vector(*res)
            else:
                print('Умножение векторов разной длины недопустимо')
        elif isinstance(other, int):
            res = list(i * other for i in self.values)
            return Vector(*res)
        else:
            print(f'Вектор нельзя умножать с {other}')


v1 = Vector(1,2,3)
print(v1) # печатает "Вектор(1, 2, 3)"

v2 = Vector(3,4,5)
print(v2) # печатает "Вектор(3, 4, 5)"
v3 = v1 + v2
print(v3.values) # печатает "Вектор(4, 6, 8)"
v4 = v3 + 5
print(v4) # печатает "Вектор(9, 11, 13)"
v5 = v1 * 2
print(v5) # печатает "Вектор(2, 4, 6)"
v5 + 'hi' # печатает "Вектор нельзя сложить с hi"
